dependencies {
  compile project(":annotation-processors")
}

apply plugin:'application'
mainClassName = "my.Application"

for (configuration in ['aspectpath', 'ajInpath', 'testAspectpath', 'testAjInpath']) {
  if (project.configurations.findByName(configuration) == null) {
    project.configurations.create(configuration)
  }
}

if (!project.sourceSets.main.allJava.isEmpty()) {
  project.tasks.create(name: 'compileAspect', overwrite: true, description: 'Compiles AspectJ Source', type: Ajc) {
    sourceSet = project.sourceSets.main

    inputs.files(sourceSet.allJava)
    outputs.dir(sourceSet.output.classesDir)
    aspectPath = project.configurations.aspectpath
    ajInpath = project.configurations.ajInpath
  }

  project.tasks.compileAspect.setDependsOn(project.tasks.compileJava.dependsOn)

  project.tasks.compileJava.deleteAllActions()
  project.tasks.compileJava.dependsOn project.tasks.compileAspect
}

if (!project.sourceSets.test.allJava.isEmpty()) {
  project.tasks.create(name: 'compileTestAspect', overwrite: true, description: 'Compiles AspectJ Test Source', type: Ajc) {
    sourceSet = project.sourceSets.test

    inputs.files(sourceSet.allJava)
    outputs.dir(sourceSet.output.classesDir)
    aspectPath = project.configurations.testAspectpath
    ajInpath = project.configurations.testAjInpath
  }

  project.tasks.compileTestAspect.setDependsOn(project.tasks.compileTestJava.dependsOn)

  project.tasks.compileTestJava.deleteAllActions()
  project.tasks.compileTestJava.dependsOn project.tasks.compileTestAspect
}

class Ajc extends DefaultTask {

  SourceSet sourceSet

  FileCollection aspectPath
  FileCollection ajInpath

  // ignore or warning
  String xlint = 'ignore'

  String maxmem

  Ajc() {
    logging.captureStandardOutput(LogLevel.INFO)
  }

  @TaskAction
  def compile() {
    logger.info("=" * 100)
    logger.info("=" * 100)
    logger.info("Running ajc ...")
    logger.info("classpath: ${sourceSet.compileClasspath.asPath}")
    logger.info("destDir: ${sourceSet.output.classesDir.absolutePath}")
    logger.info("source: ${project.convention.plugins.java.sourceCompatibility}")
    logger.info("target: ${project.convention.plugins.java.targetCompatibility}")
    logger.info("inpath: ${ajInpath.asPath}")
    logger.info("srcDirs ${sourceSet.java.srcDirs}")
    logger.info("aspectPath: ${aspectPath.asPath}")
    logger.info("=" * 100)
    logger.info("=" * 100)

    def iajcArgs = [classpath           : sourceSet.compileClasspath.asPath,
                    destDir             : sourceSet.output.classesDir.absolutePath,
                    source              : project.convention.plugins.java.sourceCompatibility,
                    target              : project.convention.plugins.java.targetCompatibility,
                    inpath              : ajInpath.asPath,
                    xlint               : xlint,
                    fork                : 'true',
                    aspectPath          : aspectPath.asPath,
                    sourceRootCopyFilter: '**/*.java,**/*.aj',
                    showWeaveInfo       : 'true',
                    s                   : "src/main/generated"
    ]

    if (maxmem != null) {
      iajcArgs['maxmem'] = maxmem
    }

    ant.taskdef(resource: "org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties",
        classpath: project.configurations.ajtools.asPath)

    ant.iajc(iajcArgs) {
      sourceroots {
        sourceSet.java.srcDirs.each {
          logger.info("   sourceRoot $it")
          pathelement(location: it.absolutePath)
        }
      }
    }
  }
}